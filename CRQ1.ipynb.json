{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "events = pd.read_json('/Users/MO/Desktop/AMD/AMD-HW2/Dataset/events/events_England.json')\n",
    "players = pd.read_json('/Users/MO/Desktop/AMD/AMD-HW2/Dataset/players.json')\n",
    "teams = pd.read_json('/Users/MO/Desktop/AMD/AMD-HW2/Dataset/teams.json')\n",
    "matches = pd.read_json('/Users/MO/Desktop/AMD/AMD-HW2/Dataset/matches/matches_England.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get indeces of Goals events according following tags: (101'Goal' or 102'Own goal') and 1801'Accurate'\n",
    "tags=[]\n",
    "goals_idx=[]\n",
    "for i in events['tags']: #i is the event raw\n",
    "    tags.append([j.get('id') for j in i]) #Getting tags IDs for every i as a list then append to tags list\n",
    "for i in range(len(tags)): \n",
    "    if (101 in tags[i])or (102 in tags[i]): #To filter tags and get Goal events indeces\n",
    "        goals_idx.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Save attempt events 1019\n",
      "# other events 1017\n",
      "2499781\n",
      "2499988\n"
     ]
    }
   ],
   "source": [
    "print(\"# Save attempt events\",events.loc[goals_idx].query(\"eventName == 'Save attempt'\").shape[0])\n",
    "print(\"# other events\",events.loc[goals_idx].query(\"eventName != 'Save attempt'\").shape[0])\n",
    "# If every scored goal has 2 events: one form the attack side and the other from the defence side, so the last 2 numbers\n",
    "# has to be equal 1018 (the same number of match results in Matches Dataset) but here there is a problem in 2 matches\n",
    "#as following\n",
    "uni = events.loc[goals_idx].matchId.unique() #Getting the unique matchIds\n",
    "for i in uni: #iterate to find which match has diffrent values attack and defence events\n",
    "    saves=0\n",
    "    others=0\n",
    "    df= events.where(events.loc[goals_idx].matchId==i).dropna()\n",
    "    for j in df['eventName']:\n",
    "        if j == 'Save attempt':saves+=1\n",
    "        else: others+=1\n",
    "    if saves!=others: print(i)\n",
    "        \n",
    "#For Match (Id = 2499781) there is one Goal event stored as (Save attempt) without attack events\n",
    "#For Match (Id = 2499988) 2 goals have been scored but there are 5 goal events stored (3 Save attempt & 2 Shot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "goal_events=events.loc[goals_idx].query(\"eventName != 'Save attempt'\")\n",
    "missed_goal = events.loc[goals_idx].query(\"matchId == '2499781'\")\n",
    "goal_events = goal_events.append(missed_goal)\n",
    "\n",
    "\n",
    "queries=[]\n",
    "for j in range(1,3): #generate queries to filter goal_events for each period\n",
    "    for i in range(6):\n",
    "        if i == 5: queries.append('eventSec >'+str(i*540) + \" & matchPeriod=='\"+str(j)+\"H'\")\n",
    "        else: queries.append('eventSec >'+str(i*540) +' & eventSec <'+ str((i+1)*540)+\" & matchPeriod=='\"+str(j)+\"H'\" )\n",
    "\n",
    "\n",
    "num_goals= []\n",
    "for i in range(len(queries)): # Filtering goal_events by periods using queries\n",
    "    num_goals.append(goal_events.query(queries[i]).shape[0])\n",
    "    \n",
    "# Create bars   \n",
    "bars = ('0:9', '9:18', '18:27', '27:36', '36:45', '45+','0:9', '9:18', '18:27', '27:36', '36:45', '45+' )\n",
    "y_pos = np.arange(len(bars))\n",
    "figure(num=None, figsize=(10, 8), dpi=90, facecolor='w', edgecolor='k') # resize figure\n",
    "plt.bar(y_pos, num_goals, color=['grey', 'red', 'green', 'blue', 'cyan','orange']) \n",
    "#Label names\n",
    "plt.ylabel('Number of Goals')\n",
    "plt.xlabel('Periods')\n",
    "\n",
    "# Create names on the x-axis\n",
    "plt.xticks(y_pos, bars)\n",
    " # Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the top 10 teams that score the most in the interval \"81-90\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team Name</th>\n",
       "      <th>Team ID</th>\n",
       "      <th># Goals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>1625</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1609</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1610</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Manchester United</td>\n",
       "      <td>1611</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Watford</td>\n",
       "      <td>1644</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>1612</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>1628</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>West Ham United</td>\n",
       "      <td>1633</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AFC Bournemouth</td>\n",
       "      <td>1659</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>West Bromwich Albion</td>\n",
       "      <td>1627</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Team Name  Team ID  # Goals\n",
       "0       Manchester City     1625       13\n",
       "1               Arsenal     1609       11\n",
       "2               Chelsea     1610       10\n",
       "3     Manchester United     1611        9\n",
       "4               Watford     1644        7\n",
       "5             Liverpool     1612        7\n",
       "6        Crystal Palace     1628        7\n",
       "7       West Ham United     1633        6\n",
       "8       AFC Bournemouth     1659        5\n",
       "9  West Bromwich Albion     1627        5"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "last_period = goal_events.query(\"eventSec > 2160 & eventSec < 2700 & matchPeriod== '2H'\" )\n",
    "most_freq = Counter(last_period.teamId).most_common(10)\n",
    "most_freq_id = [i[0] for i in most_freq]\n",
    "top_ten =[teams.name.where(teams.wyId == j).dropna().to_numpy()[0] for j in most_freq_id]\n",
    "result=pd.DataFrame({'Team Name':top_ten,'Team ID':most_freq_id, '# Goals':[i[1] for i in most_freq] })\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Show if there are players that were able to score at least one goal in 8 different intervals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First Name</th>\n",
       "      <th>Last Name</th>\n",
       "      <th>Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alexandre</td>\n",
       "      <td>Lacazette</td>\n",
       "      <td>25413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>\\u00c1lvaro Borja</td>\n",
       "      <td>Morata Mart\\u00edn</td>\n",
       "      <td>3324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Harry</td>\n",
       "      <td>Kane</td>\n",
       "      <td>8717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Marko</td>\n",
       "      <td>Arnautovi\\u0107</td>\n",
       "      <td>14703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jamie</td>\n",
       "      <td>Vardy</td>\n",
       "      <td>12829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Raheem Shaquille</td>\n",
       "      <td>Sterling</td>\n",
       "      <td>11066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Mohamed</td>\n",
       "      <td>Salah Ghaly</td>\n",
       "      <td>120353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Roberto Firmino</td>\n",
       "      <td>Barbosa de Oliveira</td>\n",
       "      <td>15808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Romelu</td>\n",
       "      <td>Lukaku Menama</td>\n",
       "      <td>7905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wilfried</td>\n",
       "      <td>Zaha</td>\n",
       "      <td>8422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gabriel Fernando</td>\n",
       "      <td>de Jesus</td>\n",
       "      <td>340386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Riyad</td>\n",
       "      <td>Mahrez</td>\n",
       "      <td>26150</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           First Name            Last Name      Id\n",
       "0           Alexandre            Lacazette   25413\n",
       "1   \\u00c1lvaro Borja   Morata Mart\\u00edn    3324\n",
       "2               Harry                 Kane    8717\n",
       "3               Marko      Arnautovi\\u0107   14703\n",
       "4               Jamie                Vardy   12829\n",
       "5    Raheem Shaquille             Sterling   11066\n",
       "6            Mohamed           Salah Ghaly  120353\n",
       "7     Roberto Firmino  Barbosa de Oliveira   15808\n",
       "8              Romelu        Lukaku Menama    7905\n",
       "9            Wilfried                 Zaha    8422\n",
       "10   Gabriel Fernando             de Jesus  340386\n",
       "11              Riyad               Mahrez   26150"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d={i+1:goal_events.query(queries[i])[['playerId']] for i in range(len(queries)) }\n",
    "scorer =pd.concat(d)\n",
    "players_ids=[]\n",
    "for i in scorer.playerId.unique():\n",
    "    counter=0\n",
    "    for j in range(1,len(d)+1):\n",
    "        \n",
    "        if i in scorer.loc[j].playerId.to_numpy(): \n",
    "            counter+=1\n",
    "    if counter >= 8 : \n",
    "        #print(i,counter)\n",
    "        players_ids.append(i)\n",
    "players_fnames=[players['firstName'].where(players.wyId == j).dropna().to_numpy()[0] for j in players_ids] \n",
    "players_lnames=[players['lastName'].where(players.wyId == j).dropna().to_numpy()[0] for j in players_ids]   \n",
    "result=pd.DataFrame({'First Name':players_fnames,'Last Name':players_lnames, 'Id':players_ids})\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
